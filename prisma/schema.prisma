// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  CLIENT
  PROFESSIONAL
}

enum ProfessionalType {
  YOGA_TEACHER
  PERSONAL_COACH
  THERAPIST
  MASSAGE_THERAPIST
  PILATES_INSTRUCTOR
  MEDITATION_TEACHER
  LIFE_COACH
  OTHER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
  FAILED
}

// ==================== NOUVEAUX ENUMS POUR ABONNEMENTS ====================

enum SubscriptionStatus {
  active
  past_due
  canceled
  incomplete
  incomplete_expired
  unpaid
}

enum SubscriptionPlan {
  standard
  premium
}

enum CancelationStatus {
  pending
  approved
  denied
  resolved
}

// ==================== MODÈLES EXISTANTS ====================

model ResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)

  @@index([token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(CLIENT)
  isFirstVisit  Boolean   @default(true)
  hasProfile    Boolean   @default(false)
  selectedPlan String? // 'standard' | 'premium'
  
  // NOUVEAU : Stripe Customer ID pour abonnements
  stripeCustomerId String? @unique
  
  accounts      Account[]
  sessions      Session[]
  resetTokens   ResetToken[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations avec suppression en cascade
  clientProfile       Client?       @relation("UserToClient")
  professionalProfile Professional? @relation("UserToProfessional")
  
  // NOUVELLES RELATIONS : Abonnements
  subscription        Subscription?
  cancelationRequests CancelationRequest[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ==================== NOUVEAUX MODÈLES : ABONNEMENTS ====================

model Subscription {
  id                   String             @id @default(cuid())
  userId               String             @unique
  
  // Stripe IDs
  stripeCustomerId     String?
  stripeSubscriptionId String?            @unique
  
  // Statut et plan
  status               SubscriptionStatus @default(incomplete)
  plan                 SubscriptionPlan   @default(standard)
  
  // Période et annulation
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean            @default(false)
  
  // Métadonnées
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  // Relations
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  cancelationRequests  CancelationRequest[]

  @@map("subscriptions")
}

model CancelationRequest {
  id                String            @id @default(cuid())
  userId            String
  subscriptionId    String
  
  // Informations de la demande
  reason            String            // Prix, fonctionnalités, concurrence, etc.
  feedback          String?           @db.Text
  contactPreference String            @default("email") // email, phone, chat
  
  // Statut et traitement
  status            CancelationStatus @default(pending)
  adminResponse     String?           @db.Text
  adminUserId       String?           // Qui a traité la demande
  
  // Dates
  requestedAt       DateTime          @default(now())
  processedAt       DateTime?
  
  // Relations
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription      Subscription      @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("cancelation_requests")
}

// ==================== MODÈLES EXISTANTS (INCHANGÉS) ====================

model Professional {
  id              String    @id @default(cuid())
  userId          String    @unique
  type            ProfessionalType
  otherTypeDetails String?
  specialties     String[]
  description     String?   @db.Text
  phone           String?
  bio             String?   @db.Text
  address         String?
  city            String?
  postalCode      String?
  country         String?   @default("FR")
  location        Json?
  yearsExperience Int?
  certifications  String[]
  languages       String[]  @default(["fr"])
  
  // Business settings
  subscriptionTier String    @default("standard")
  stripeCustomerId String?
  allowedBookingWindow Int   @default(30)
  cancelationWindow    Int   @default(24)
  autoConfirmBookings  Boolean @default(false)
  bufferTime           Int   @default(0)
  
  // Coordonnées géographiques
  latitude        Float?
  longitude       Float?
  
  // Relations avec suppression en cascade
  user            User      @relation("UserToProfessional", fields: [userId], references: [id], onDelete: Cascade)
  services        Service[] @relation("ProfessionalToService")
  bookings        Booking[] @relation("ProfessionalToBooking")
  availability    Availability[] @relation("ProfessionalToAvailability")
  reviews         Review[]  @relation("ProfessionalToReview")
  website         Website?  @relation("ProfessionalToWebsite")
  invoices        Invoice[] @relation("ProfessionalToInvoice")
  invoiceSettings InvoiceSettings? @relation("ProfessionalToInvoiceSettings")
  notifications   NotificationSettings? @relation("ProfessionalToNotifications")
  invitations   InvitationToken[]
  clients         ProfessionalClient[]
  
  // NOUVEAU SYSTÈME : Cours collectifs
  groupClasses    GroupClass[] @relation("ProfessionalToGroupClass")

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model InvitationToken {
  id            String    @id @default(cuid())
  token         String    @unique
  email         String
  professionalId String
  expires       DateTime
  used          Boolean   @default(false)
  createdAt     DateTime  @default(now())
  
  professional  Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)

  @@index([token])
}

model Client {
  id            String    @id @default(cuid())
  userId        String    @unique
  phone         String?
  address       String?
  city          String?
  postalCode    String?
  country       String?   @default("FR")
  birthDate     DateTime?
  gender        String?
  notes         String?   @db.Text
  preferredLanguage String @default("fr")

  // Préférences de géolocalisation
  maxDistance     Int?      @default(25)
  showOnlineCourses Boolean @default(true)
  latitude        Float?
  longitude       Float?

  // Relations avec suppression en cascade
  user          User      @relation("UserToClient", fields: [userId], references: [id], onDelete: Cascade)
  bookings      Booking[] @relation("ClientToBooking")
  packages      ClientPackage[] @relation("ClientToPackage")
  reviews       Review[]  @relation("ClientToReview")
  invoices      Invoice[] @relation("ClientToInvoice")
  professionals   ProfessionalClient[]
  
  // ANCIEN SYSTÈME (à supprimer plus tard)
  groupParticipations GroupParticipant[]
  
  // NOUVEAU SYSTÈME : Inscriptions aux cours collectifs
  groupRegistrations GroupRegistration[] @relation("ClientToGroupRegistration")

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// ==========================================
// NOUVEAU SYSTÈME : COURS COLLECTIFS
// ==========================================

// Cours collectifs (indépendants des services)
model GroupClass {
  id              String    @id @default(cuid())
  name            String    // "Yoga du matin", "Pilates débutant"
  description     String?   @db.Text
  price           Decimal   @db.Decimal(10,2)
  duration        Int       // durée en minutes
  maxParticipants Int
  professionalId  String
  active          Boolean   @default(true)
  
  // Localisation du cours
  address         String?   // Adresse complète du cours
  city            String?   // Ville du cours
  postalCode      String?   // Code postal du cours
  latitude        Float?    // Coordonnées GPS
  longitude       Float?    // Coordonnées GPS
  isOnline        Boolean   @default(false) // Cours en ligne
  
  // Informations pratiques
  equipment       String[]  @default([]) // Matériel requis
  level           String?   // "DEBUTANT", "INTERMEDIAIRE", "AVANCE", "TOUS_NIVEAUX"
  category        String?   // "YOGA", "PILATES", "FITNESS", "MEDITATION", etc.
  
  professional    Professional @relation("ProfessionalToGroupClass", fields: [professionalId], references: [id], onDelete: Cascade)
  sessions        GroupSession[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Sessions/séances d'un cours collectif
model GroupSession {
  id              String    @id @default(cuid())
  groupClassId    String
  startTime       DateTime
  endTime         DateTime
  status          String    @default("SCHEDULED") // SCHEDULED, CANCELLED, COMPLETED
  notes           String?   @db.Text
  currentParticipants Int @default(0)
  
  // Pour la récurrence
  isRecurring     Boolean   @default(false)
  recurrenceRule  String?   // JSON avec les règles de récurrence
  
  groupClass      GroupClass @relation(fields: [groupClassId], references: [id], onDelete: Cascade)
  registrations   GroupRegistration[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Inscriptions aux séances
model GroupRegistration {
  id              String    @id @default(cuid())
  sessionId       String
  clientId        String
  status          String    @default("REGISTERED") // REGISTERED, CANCELLED, ATTENDED, NO_SHOW
  paymentStatus   String    @default("PENDING")
  registeredAt    DateTime  @default(now())
  
  session         GroupSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  client          Client    @relation("ClientToGroupRegistration", fields: [clientId], references: [id], onDelete: Cascade)
  
  @@unique([sessionId, clientId])
}

// ==========================================
// SYSTÈME EXISTANT : RENDEZ-VOUS INDIVIDUELS
// ==========================================

// Services pour rendez-vous individuels uniquement
model Service {
  id              String    @id @default(cuid())
  name            String
  description     String?   @db.Text
  duration        Int
  price           Decimal   @db.Decimal(10,2)
  type            String?
  color           String?
  location        String?
  professionalId  String
  active          Boolean   @default(true)
  
  // SUPPRIMÉ : maxParticipants (plus nécessaire, les services sont pour l'individuel uniquement)
  
  professional    Professional @relation("ProfessionalToService", fields: [professionalId], references: [id], onDelete: Cascade)
  bookings        Booking[]    @relation("ServiceToBooking")

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Réservations pour rendez-vous individuels
model Booking {
  id                String    @id @default(cuid())
  startTime         DateTime
  endTime           DateTime
  status            BookingStatus @default(PENDING)
  paymentStatus     PaymentStatus @default(PENDING)
  notes             String?   @db.Text
  cancellationReason String?  @db.Text
  
  serviceId       String
  service         Service   @relation("ServiceToBooking", fields: [serviceId], references: [id], onDelete: Cascade)
  clientId        String
  client          Client    @relation("ClientToBooking", fields: [clientId], references: [id], onDelete: Cascade)
  professionalId  String
  professional    Professional @relation("ProfessionalToBooking", fields: [professionalId], references: [id], onDelete: Cascade)
  invoiceId       String?
  invoice         Invoice?  @relation("BookingToInvoice", fields: [invoiceId], references: [id])
  review          Review?   @relation("BookingToReview")

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // ANCIEN SYSTÈME À SUPPRIMER (remplacé par GroupClass)
  isGroupClass     Boolean        @default(false)
  maxParticipants  Int            @default(1)
  currentParticipants Int         @default(1)
  groupParticipants GroupParticipant[]

  // Champs pour la récurrence (à garder pour les RDV individuels)
  isRecurring       Boolean       @default(false)
  recurrenceRule    RecurrenceRule? @relation("BookingToRecurrenceRule")
  parentBookingId   String?
  parentRecurrenceId String?
  recurrenceOccurrences RecurrenceRule? @relation("RecurrenceRuleToOccurrences", fields: [parentRecurrenceId], references: [id], onDelete: SetNull)
}

model Availability {
  id              String    @id @default(cuid())
  dayOfWeek       Int       // 0-6 (Dimanche-Samedi)
  startTime       String    // format "HH:mm"
  endTime         String    // format "HH:mm"
  professionalId  String
  
  professional    Professional @relation("ProfessionalToAvailability", fields: [professionalId], references: [id], onDelete: Cascade)

  @@unique([professionalId, dayOfWeek, startTime, endTime])
}

model Website {
  id              String    @id @default(cuid())
  professionalId  String    @unique
  domain          String?   @unique
  template        String    @default("default")
  customizations  Json?
  seoTitle        String?
  seoDescription  String?   @db.Text
  
  welcomeText     String?   @db.Text
  aboutText       String?   @db.Text
  servicesText    String?   @db.Text
  contactText     String?   @db.Text
  
  professional    Professional @relation("ProfessionalToWebsite", fields: [professionalId], references: [id], onDelete: Cascade)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Review {
  id              String    @id @default(cuid())
  rating          Int
  comment         String?   @db.Text
  response        String?   @db.Text
  visible         Boolean   @default(true)
  
  clientId        String
  client          Client    @relation("ClientToReview", fields: [clientId], references: [id], onDelete: Cascade)
  professionalId  String
  professional    Professional @relation("ProfessionalToReview", fields: [professionalId], references: [id], onDelete: Cascade)
  bookingId       String    @unique
  booking         Booking   @relation("BookingToReview", fields: [bookingId], references: [id], onDelete: Cascade)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Invoice {
  id              String    @id @default(cuid())
  number          String    @unique
  date            DateTime
  dueDate         DateTime
  status          String
  totalAmount     Decimal   @db.Decimal(10,2)
  taxRate         Decimal   @db.Decimal(5,2) @default(0)
  taxAmount       Decimal   @db.Decimal(10,2) @default(0)
  
  clientId        String
  professionalId  String
  paymentDate     DateTime?
  paymentMethod   String?
  paymentRef      String?
  notes           String?   @db.Text
  
  client          Client     @relation("ClientToInvoice", fields: [clientId], references: [id], onDelete: Cascade)
  professional    Professional @relation("ProfessionalToInvoice", fields: [professionalId], references: [id], onDelete: Cascade)
  bookings        Booking[]  @relation("BookingToInvoice")
  items           InvoiceItem[] @relation("InvoiceToItems")

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model InvoiceItem {
  id              String    @id @default(cuid())
  invoiceId       String
  description     String
  quantity        Int
  unitPrice       Decimal   @db.Decimal(10,2)
  totalPrice      Decimal   @db.Decimal(10,2)
  
  invoice         Invoice   @relation("InvoiceToItems", fields: [invoiceId], references: [id], onDelete: Cascade)
}

model InvoiceSettings {
  id              String    @id @default(cuid())
  professionalId  String    @unique
  businessName    String?
  address         String?
  taxNumber       String?
  iban            String?
  swift           String?
  paymentTerms    String?
  notes           String?   @db.Text
  logoUrl         String?
  nextInvoiceNumber Int     @default(1)
  
  professional    Professional @relation("ProfessionalToInvoiceSettings", fields: [professionalId], references: [id], onDelete: Cascade)
}

model NotificationSettings {
  id              String    @id @default(cuid())
  professionalId  String    @unique
  
  // Paramètres de base
  emailEnabled    Boolean   @default(true)
  smsEnabled      Boolean   @default(false)
  reminderHours   Int       @default(24)
  
  // Types de notifications (nouveaux champs avec valeurs par défaut)
  cancelationNotifications Boolean @default(true)
  newBookingNotifications  Boolean @default(true)
  reminderNotifications    Boolean @default(true)
  
  // Personnalisation des emails (nouveaux champs optionnels)
  emailSignature           String? @db.Text
  defaultCancelationReason String? @default("Raisons personnelles")
  autoConfirmCancelations  Boolean @default(false)
  
  // Relations
  professional    Professional @relation("ProfessionalToNotifications", fields: [professionalId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt
}

model ClientPackage {
  id                String    @id @default(cuid())
  clientId          String
  name              String
  totalSessions     Int
  remainingSessions Int
  price             Decimal   @db.Decimal(10,2)
  validFrom         DateTime  @default(now())
  validUntil        DateTime?
  
  client            Client    @relation("ClientToPackage", fields: [clientId], references: [id], onDelete: Cascade)

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model ProfessionalClient {
  id              String    @id @default(cuid())
  professionalId  String
  clientId        String
  createdAt       DateTime  @default(now())
  
  professional    Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
  client          Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  @@unique([professionalId, clientId])
}

enum RecurrenceType {
  NONE
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
}

// Pour la récurrence des RDV individuels
model RecurrenceRule {
  id              String          @id @default(cuid())
  bookingId       String          @unique
  type            RecurrenceType
  interval        Int             @default(1)
  weekdays        Int[]
  monthDay        Int?
  endDate         DateTime?
  endAfter        Int?
  
  booking         Booking         @relation("BookingToRecurrenceRule", fields: [bookingId], references: [id], onDelete: Cascade)
  occurrences     Booking[]       @relation("RecurrenceRuleToOccurrences")
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

// ==========================================
// ANCIEN SYSTÈME À SUPPRIMER PLUS TARD
// ==========================================

// ANCIEN - Participants aux cours collectifs via Booking
model GroupParticipant {
  id              String    @id @default(cuid())
  bookingId       String
  clientId        String
  status          BookingStatus @default(PENDING)
  createdAt       DateTime  @default(now())
  
  booking         Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  client          Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  @@unique([bookingId, clientId])
}